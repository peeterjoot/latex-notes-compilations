#!/usr/bin/perl

use warnings ;
use strict ;
use Getopt::Long;

BEGIN {
   push( @INC, "$ENV{HOME}/project/", "$ENV{HOME}/physicsplay", "$ENV{HOME}/physicsplay/notes") ;
}

my $doGabook = 0 ;
my $doGabookI = 0 ;
my $doGabookII = 0 ;
my $doNonga = 0 ;
my $doPhy356 = 0 ;
my $doClassicalMechanics = 0 ;
my $doPhy456 = 0 ;
my $doPhy452 = 0 ;
my $doPhy454 = 0 ;
my $doPhy485 = 0 ;
my $doPhy450 = 0 ;
my $doPhy487 = 0 ;
my $doEce1254 = 0 ;
my $doEce1229 = 0 ;
my $doPhy1520 = 0 ;
my $doPhy2403 = 0 ;
my $doEce1236 = 0 ;
my $doEce1228 = 0 ;
my $doGAelectrodynamics = 0 ;
my $doOtherbook = 0 ;

my $doBib = 0 ;
my $doHistory = 0 ;
my $doMathematica = 0 ;
my $doMatlab = 0 ;
my $doJulia = 0 ;
my $latex = 0 ;
my $cdf = 0 ;
#my $doMathematicaFtp = 0 ;
my $redacted = 0 ;
my $filter ;
my $chaptertex = 'chapter';

GetOptions
(
   'gabook!'               => \$doGabook,
   'gabookI!'              => \$doGabookI,
   'gabookII!'             => \$doGabookII,
   'phy356!'               => \$doPhy356,
   'classicalmechanics!'   => \$doClassicalMechanics,
   'phy456!'               => \$doPhy456,
   'phy454!'               => \$doPhy454,
   'phy485!'               => \$doPhy485,
   'phy452!'               => \$doPhy452,
   'phy487!'               => \$doPhy487,
   'ece1254!'              => \$doEce1254,
   'ece1229!'              => \$doEce1229,
   'phy450!'               => \$doPhy450,
   'phy1520!'              => \$doPhy1520,
   'phy2403!'              => \$doPhy2403,
   'ece1236!'              => \$doEce1236,
   'ece1228!'              => \$doEce1228,
   'GAelectrodynamics'     => \$doGAelectrodynamics,
   'miscphysics!'          => \$doNonga,
   'latex!'                => \$latex,
   'cdf!'                  => \$cdf,
   'mathematica!'          => \$doMathematica,
   'matlab!'               => \$doMatlab,
   'julia!'                => \$doJulia,
   'otherbook!'            => \$doOtherbook,
   'redacted'              => \$redacted,
   'filter=s'              => \$filter,
   'bib!'                  => \$doBib,
   'history!'              => \$doHistory,
   'chapter=s'             => \$chaptertex,
   'all'        => sub {
                          $doGabook = 1 ;
                          $doGabookI = 1 ;
                          $doGabookII = 1 ;
                          $doNonga = 1 ;
                          $doPhy356 = 1 ;
                          $doClassicalMechanics = 1 ;
                          $doPhy454 = 1 ;
                          $doPhy485 = 1 ;
                          $doPhy452 = 1 ;
                          $doPhy456 = 1 ;
                          $doPhy450 = 1 ;
                          $doPhy487 = 1 ;
                          $doEce1254 = 1 ;
                          $doEce1229 = 1 ;
                          $doOtherbook = 1 ;
                          $doPhy1520 = 1 ;
                          $doPhy2403 = 1 ;
                          $doEce1236 = 1 ;
                          $doEce1228 = 1 ;
                          $doGAelectrodynamics = 1 ;
                       },

   'help'       => sub { die
"METADATA [-help | -history | -bib] [-mathematica [-latex|-cdf] | -matlab [-latex] | -julia | -other | -phy356 | -classicalmechanics | -phy456 | -phy454 | -phy485 | -phy450 | -phy452 | -phy487 | -gabook | -gabookI | -gabookII | -ece1254 | -ece1229 | -phy1520 | -phy2403 | -ece1236 | -ece1228 -GAelectrodynamics] [-redacted] [-filter dirname/]

options:
-history hypertext history.

i.e.
   ./METADATA -history -all

-bib bibtex listing of the documents.
" ; },
) ;

my @META = (
"gabookI/METADATA",
"gabookII/METADATA",
"miscphysics/METADATA",
"phy356-qmI/METADATA",
"classicalmechanics/METADATA",
"phy456-qmII/METADATA",
"phy485-optics/METADATA",
"phy452-basicstatmech/METADATA",
"phy487-qmsolids/METADATA",
"ece1254-multiphysics/METADATA",
"ece1229-antenna/METADATA",
"phy1520-quantum/METADATA",
"phy2403-quantum-field-theory/METADATA",
"phy454-continuumechanics/METADATA",
"phy450-relativisticEandM/METADATA",
"ece1236-microwaves/METADATA",
"ece1228-electromagnetic-theory/METADATA",
"GAelectrodynamics/METADATA",
"otherbook/METADATA",
"mathematica/METADATA",
"matlab/METADATA",
"julia/METADATA" 
) ;
foreach (@META)
{
require $_;
}

my @gabookI = gabookIMeta() ;
my @gabookII = gabookIIMeta() ;
my @miscphysics = miscMeta() ;
my @phy356 = phy356Meta() ;
my @classicalmechanics = classicalMechMeta() ;
my @phy456 = phy456Meta() ;
my @phy485 = phy485Meta() ;
my @phy452 = phy452Meta() ;
my @phy487 = phy487Meta() ;
my @ece1254 = ece1254Meta() ;
my @ece1229 = ece1229Meta() ;
my @phy1520 = phy1520Meta() ;
my @phy2403 = phy2403Meta() ;
my @ece1236 = ece1236Meta() ;
my @ece1228 = ece1228Meta() ;
my @GAelectrodynamics = GAelectrodynamicsMeta() ;
my @phy454 = phy454Meta() ;
my @phy450 = phy450Meta() ;
my @otherbook = otherbookMeta() ;
my @mathematica = mathematicaMeta() ;
my @matlab = matlabMeta() ;
my @julia = juliaMeta() ;

if ( !defined $filter )
{
   if ( $doGabook )
   {
      $filter = "gabook" ;
   }

   if ( $doGabookI )
   {
      $filter = "gabookI" ;
   }

   if ( $doGabookII )
   {
      $filter = "gabookII" ;
   }

   # mathematica for this one?
   #if ( $doPhy356 )
   #{
   #   $filter = "phy356/" ;
   #}

   if ( $doPhy450 )
   {
      $filter = "phy450/" ;
   }

   if ( $doPhy456 )
   {
      $filter = "phy456/" ;
   }

   if ( $doPhy454 )
   {
      $filter = "phy454/" ;
   }

   if ( $doPhy485 )
   {
      $filter = "phy485/" ;
   }

   if ( $doClassicalMechanics )
   {
      $filter = "classicalmechanics/" ;
   }

   if ( $doPhy452 )
   {
      $filter = "phy452/" ;
   }

   if ( $doPhy487 )
   {
      $filter = "phy487/" ;
   }

   if ( $doEce1254 )
   {
      $filter = "ece1254/" ;
   }

   if ( $doEce1229 )
   {
      $filter = "ece1229/" ;
   }

   if ( $doPhy1520 )
   {
      $filter = "phy1520/" ;
   }

   if ( $doPhy2403 )
   {
      $filter = "phy2403-quantum-field-theory/" ;
   }

   if ( $doEce1236 )
   {
      $filter = "ece1236/" ;
   }

   if ( $doEce1228 )
   {
      $filter = "ece1228-emt/" ;
   }

   if ( $doGAelectrodynamics )
   {
      $filter = "GAelectrodynamics/" ;
   }
}

my %monthsOfYear = (
'January' => 1,
'Jan' => 1,
'February' => 2,
'Feb' => 2,
'March' => 3,
'Mar' => 3,
'April' => 4,
'Apr' => 4,
'May' => 5,
'June' => 6,
'Jun' => 6,
'July' => 7,
'Jul' => 7,
'August' => 8,
'Aug' => 8,
'September' => 9,
'Sept' => 9,
'Sep' => 9,
'October' => 10,
'Oct' => 10,
'November' => 11,
'Nov' => 11,
'December' => 12,
'Dec' => 12,
) ;

#checkDate() ; die ;

my @All ;

if ( $doGabook )
{
   push( @All, @gabookI ) ;
   push( @All, @gabookII ) ;
}

if ( $doGabookI )
{
   push( @All, @gabookI ) ;
}

if ( $doGabookII )
{
   push( @All, @gabookII ) ;
}

if ( $doOtherbook )
{
   push( @All, @otherbook ) ;
}

if ( $doPhy356 )
{
   push( @All, @phy356 ) ;
}

if ( $doClassicalMechanics )
{
   push( @All, @classicalmechanics ) ;
}

if ( $doPhy456 )
{
   push( @All, @phy456 ) ;
}

if ( $doPhy454 )
{
   push( @All, @phy454 ) ;
}

if ( $doPhy485 )
{
   push( @All, @phy485 ) ;
}

if ( $doPhy452 )
{
   push( @All, @phy452 ) ;
}

if ( $doPhy487 )
{
   push( @All, @phy487 ) ;
}

if ( $doEce1254 )
{
   push( @All, @ece1254 ) ;
}

if ( $doEce1229 )
{
   push( @All, @ece1229 ) ;
}

if ( $doPhy1520 )
{
   push( @All, @phy1520 ) ;
}

if ( $doPhy2403 )
{
   push( @All, @phy2403 ) ;
}

if ( $doEce1236 )
{
   push( @All, @ece1236 ) ;
}

if ( $doEce1228 )
{
   push( @All, @ece1228 ) ;
}

if ( $doGAelectrodynamics )
{
   push( @All, @GAelectrodynamics ) ;
}

if ( $doPhy450 )
{
   push( @All, @phy450 ) ;
}

if ( $doNonga )
{
   push( @All, @miscphysics ) ;
}

my %titles =
(
   'gabook'                       => 'Exploring physics with Geometric Algebra',
   'gabookI'                      => 'Exploring physics with Geometric Algebra, Part I',
   'gabookII'                     => 'Exploring physics with Geometric Algebra, Part II',
   'miscphysics'                  => 'Misc Physics and Math Play',
   'phy356'                       => 'Quantum Mechanics I',
   'phy456'                       => 'Quantum Mechanics II',
   'phy450'                       => 'Relativistic Electrodynamics',
   'classicalmechanics'           => 'Some classical mechanics notes',
   'phy454'                       => 'Continuum mechanics',
   'phy452'                       => 'Basic statistical mechanics',
   'phy485'                       => 'Advanced classical optics',
   'phy487'                       => 'Condensed matter physics',
   'ece1254'                      => 'Modeling of Multiphysics Systems',
   'ece1229'                      => 'Advanced Antenna Theory',
   'phy1520'                      => 'Graduate Quantum Mechanics',
   'phy2403'                      => 'Quantum Field Theory I',
   'phy2403-quantum-field-theory' => 'Quantum Field Theory I',
   'ece1236'                      => 'Microwave Circuits',
   'ece1228'                      => 'Electromagnetic Theory',
   'ece1228-emt'                  => 'Electromagnetic Theory',
   'ece1505'                      => 'Convex Optimization',
   'ece1505-convex-optimization'  => 'Convex Optimization',
   'GAelectrodynamics'            => 'Geometric Algebra for Electrical Engineers',
);

if ( $doHistory )
{
   printHistory( @All ) ;
}
elsif ( $doBib )
{
   printBib( @gabookI, @gabookII, @miscphysics, @phy356, @classicalmechanics, @phy456, @phy454, @phy485, @phy452, @phy450, @phy487, @ece1254, @ece1229, @otherbook, @phy1520, @phy2403, @ece1236, @ece1228, @GAelectrodynamics ) ;

   ## generate cross reference's to gabook for miscphysics.pdf
   #printBookBib( 'Exploring physics with Geometric Algebra',
   #              'gabook',
   #              'http://peeterjoot.com/archives/math2009/gabook.pdf',
   #              @gabook ) ;

   printBookBib( 'gabookI',
                 'http://peeterjoot.com/archives/math2015/gabookI.pdf',
                 @gabookI ) ;

   printBookBib( 'gabookII',
                 'http://peeterjoot.com/archives/math2015/gabookII.pdf',
                 @gabookII ) ;

   printBookBib( 'miscphysics',
                 'http://peeterjoot.com/archives/math2009/miscphysics.pdf',
                 @miscphysics ) ;

   printBookBib( 'phy356',
                 'http://peeterjoot.com/archives/math2010/phy356.pdf',
                 @phy356 ) ;

   printBookBib( 'phy456',
                 'http://peeterjoot.com/archives/math2011/phy456.pdf',
                 @phy456 ) ;

   printBookBib( 'phy450',
                 'http://peeterjoot.com/archives/math2011/phy450.pdf',
                 @phy450 ) ;

   printBookBib( 'classicalmechanics',
                 'http://peeterjoot.com/archives/math2013/classicalmechanics.pdf',
                 @classicalmechanics ) ;

   printBookBib( 'phy454',
                 'http://peeterjoot.com/archives/math2012/phy454.pdf',
                 @phy454 ) ;

   printBookBib( 'phy452',
                 'http://peeterjoot.com/archives/math2013/phy452.pdf',
                 @phy452 ) ;

   printBookBib( 'phy485',
                 'http://peeterjoot.com/archives/math2012/phy485.pdf',
                 @phy485 ) ;

   printBookBib( 'phy487',
                 'http://peeterjoot.com/archives/math2013/phy487.pdf',
                 @phy487 ) ;

   printBookBib( 'ece1254',
                 'http://peeterjoot.com/archives/math2014/ece1254.pdf',
                 @ece1254 ) ;

   printBookBib( 'ece1229',
                 'http://peeterjoot.com/archives/math2015/ece1229.pdf',
                 @ece1229 ) ;

   printBookBib( 'phy1520',
                 'http://peeterjoot.com/archives/math2015/phy1520.pdf',
                 @phy1520 ) ;

   printBookBib( 'phy2403',
                 'http://peeterjoot.com/archives/math2018/phy2403.pdf',
                 @phy2403 ) ;

   printBookBib( 'ece1236',
                 'http://peeterjoot.com/archives/math2016/ece1236.pdf',
                 @ece1236 ) ;

   printBookBib( 'ece1228',
                 'http://peeterjoot.com/archives/math2016/ece1228.pdf',
                 @ece1228 ) ;

   printBookBib( 'GAelectrodynamics',
                 'http://peeterjoot.com/archives/math2018/GAelectrodynamics.pdf',
                 @GAelectrodynamics ) ;
}
elsif ( $doMathematica )
{
   if ( $latex )
   {
      mathematicaIndexLatex( $filter ) ;
   }
   elsif ( $cdf )
   {
      # generate index of cdf files for one mathematica/ subdir (which is presumed to have a set of standalone
      # html wrappers for each of the cdfs to be listed).
      mathematicaCDFIndex( $filter ) ;
   }
   else
   {
      # This generates my mathematica.html that I update once in a while on the webpage.
      mathematicaIndex( $filter ) ;
   }
}
elsif ( $doMatlab )
{
   if ( $latex )
   {
      matlabIndexLatex( $filter ) ;
   }
#   else
#   {
#      matlabIndex() ;
#   }
}
elsif ( $doJulia )
{
   if ( $latex )
   {
      juliaIndexLatex( $filter ) ;
   }
#   else
#   {
#      juliaIndex() ;
#   }
}
#elsif ( $doMathematicaFtp )
#{
#   mathematicaFtp() ;
#}
else
{
   dumpem( @All ) ;
}

exit ;

#sub mathematicaFtp
#{
#   print "cd public_html\n" ;
#   my %dirs = () ;
#
#   foreach (@mathematica)
#   {
#      my $path = $_->{'path'} ;
#      my $dirname = $path ;
#      $dirname =~ s,/.*,, ;
#      $dirs{$dirname}++ ;
#   }
#
#   foreach (keys %dirs)
#   {
#      print "mkdir $_\n" ;
#   }
#
#   print "cd blogit\n" ;
#   print "lcd blogit\n" ;
#   print "prompt off\n" ;
#
#   foreach my $dirname (keys %dirs)
#   {
#      print "lcd ../$dirname\n" ;
#      print "cd ../$dirname\n" ;
#      print qq(mput *.nb\n) ;
#      print qq(mput *.cdf\n) ;
#      print qq(mput *.htm\n) ;
#   }
#
##   foreach (@mathematica)
##   {
##      my $path = $_->{'path'} ;
##      my $filename = $path ;
##      $filename =~ s,.*/,, ;
##      my $dirname = $path ;
##      $dirname =~ s,/.*,, ;
##
##      #next unless ( $path =~ / / ) ;
##      #my $nSpacePath = $path ;
##      #$nSpacePath =~ s/ /_/g ;
##      #print qq(git mv "$path" $nSpacePath\n) ;
##
##      print "lcd ../$dirname\n" ;
##      print "cd ../$dirname\n" ;
##      print qq(put "$filename"\n) ;
##   }
#}

sub mathematicaIndex
{
   my ($filter) = @_;

   my $extra = '';
   if ( !defined $filter )
   {
      $extra = qq(
<p>
Mathematica listings by directory
<ul>
);
      my %dirs = ();
      foreach (sort @mathematica)
      {
         my $path = $_->{'path'} ;
         $path =~ s,/.*,,;

         $dirs{$path}++;
      }

      foreach ( sort keys %dirs )
      {
         my $title = '';
         if ( defined $titles{$_} )
         {
            $title = "  $titles{$_}.";
         }
         $extra .= qq(<li><a href="$_">$_</a>$title</li>\n);
      }

      $extra .= qq(
</ul>
</p>
);
   }

   my $subtitle = '';
   if ( defined $filter )
   {
      my $t = $filter;
      $t =~ s,/,,;

      if ( defined $titles{$t} )
      {
         $subtitle = " for '$titles{$t}'";
      }
   }

   print qq(
<html>
<body>
<title>
My Mathematica notebooks$subtitle.
</title>
<p>
This page lists my mathematica notebooks$subtitle. The most recent copy of any of these notebooks can all be obtained from my github <a href="https://github.com/peeterjoot/mathematica">Mathematica repository</a>.
</p>
<p>
If you do not have a copy of Mathematica, many of these notebooks can be viewed with the free <a href="http://www.wolfram.com/cdf-player/">Wolfram CDF player</a>.
</p>
$extra
<p>
Chronological listing of Mathematica notebooks
</p>
<ul>
) ;

   foreach (sort datesort @mathematica)
   {
      my $path = $_->{'path'} ;
      my $filename = $path ;
      $filename =~ s,.*/,, ;
      my $date = $_->{'DATE'} ;
      my $desc = $_->{'WHAT'} ;
      my ($width, $height) = ( $_->{'WIDTH'}, $_->{'HEIGHT'} ) ;

      if ( defined $filter and !($path =~ m,$filter,) )
      {
         next;
      }

      unless (defined $width)
      {
         $width = 1000 ;
      }

      unless (defined $height)
      {
         $height = 1800 ;
      }

      my $pathWithoutSuffix = $path ;
      $pathWithoutSuffix =~ s/\.[^\.]+$// ;

      # CDF player doesn't open these from raw.github (although ../cdfEmbedExample.html did?)

      my $pathWithoutQualification = $path ;

      # for google sites page indexing these as links to github urls:
      my $genSitesMathematicaPages = 0 ;

      if ( $genSitesMathematicaPages )
      {
#         $path = "https://raw.github.com/peeterjoot/mathematica/master/$path" ;
         #$path = "https://github.com/peeterjoot/mathematica/raw/master/$path" ;
         $path = "https://raw.githubusercontent.com/peeterjoot/mathematica/master/$path" ;
      }
#      else
#      {
#         # for bitnami Mathematica wordpress page:
#         $path = "$path" ;
#      }

      # hack up the description to force html newlines.
      $desc =~ s/\n\n/<p>/gsm ;

      if ( $genSitesMathematicaPages )
      {
         print qq(   <li> $date
<a href="$path">$pathWithoutQualification</a>
<p>
$desc</li>\n) ;
      }
      else
      {
my $xpath = $path;
if ( defined $filter )
{
   $xpath = "../$xpath";
}
#<p>
#EMBEDDED:
#<a href="$pathWithoutSuffix.htm">$pathWithoutSuffix</a>
#<p>
#DIRECT:
         print qq(   <li> $date  <a href="$xpath">$pathWithoutQualification</a>
<p>
$desc
</p>
</li>\n) ;
      }

      # now generate a helper embedding page.

      if ( 0 )
      {
         open my $fh, ">$pathWithoutSuffix.htm" or die ;

    print $fh qq@
<html>
<body>
<title>
$pathWithoutSuffix
</title>

The <a href="http://www.wolfram.com/cdf-player/">Wolfram CDF player</a> browser plugin is required to view this notebook.

<p>
$desc

<p>
<object classid="clsid:612AB921-E294-41AA-8E98-87E7E057EF33" width="$width" height="$height" type="application/vnd.wolfram.cdf.text">
<param name="src" value="$filename">
<embed width="$width" height="$height" src="$filename" type="application/vnd.wolfram.cdf.text">
</object>

</body>
</html>
@ ;
#<script type="text/javascript" src="http://www.wolfram.com/cdf-player/plugin/v2.1/cdfplugin.js"></script>
#<script type="text/javascript">
#   var cdf = new cdfplugin() ;
#   cdf.embed('$filename', $width, $height) ;
#</script>

            close $fh ;
      }
      else
      {
         unlink "$pathWithoutSuffix.htm" ;
      }
   }

   print "\n" .
         "</ul>\n" .
         "</body>\n" .
         "</html>\n" .
         "" ;
}

sub mathematicaCDFIndex
{
   my ($filter) = @_ ;

   print qq(
<html>
<body>
<title>
Mathematica notebooks for $filter.
</title>

The <a href="http://www.wolfram.com/cdf-player/">Wolfram CDF player</a> is required to view a number of these notebooks after download.  Enabling plugins in the browser will also be required once the CDF plugin is installed.

<ul>
) ;

   foreach (sort datesort @mathematica)
   {
      my $path = $_->{'path'} ;
      my $filename = $path ;
      $filename =~ s,.*/,, ;
      my $date = $_->{'DATE'} ;
      my $desc = $_->{'WHAT'} ;

      if ( $filter )
      {
         next unless ( $path =~ /$filter/ ) ;
      }

      my $htmlPath = $path ;
      next unless ( $htmlPath =~ s/\.cdf$/.html/ ) ;

      next unless ( -e "../mathematica/$htmlPath" ) ;

      $htmlPath =~ s,.*/,, ;

      print qq(
<li> $date
<a href="$htmlPath">$htmlPath</a>
<p>
$desc
</li>
) ;
   }

   print "\n" .
         "</ul>\n" .
         "</body>\n" .
         "</html>\n" .
         "" ;
}

sub mathematicaIndexLatex
{
   my ($filter) = @_ ;

   #my $urlpath = "https://raw.github.com/peeterjoot/mathematica/master/" ;
   my $urlpath = "https://github.com/peeterjoot/mathematica/tree/master/" ;

   if ( $filter )
   {
      $urlpath .= "$filter" ;
   }

   my $prologue1 =
"
%-------------------------------------------------------
These Mathematica notebooks, some just trivial ones used to generate figures, others more elaborate, and perhaps some even polished, can be found in

\\href{$urlpath}{$urlpath}.

\\index{Mathematica}

The free \\href{http://www.wolfram.com/cdf-player/}{Wolfram CDF player}, is capable of read-only viewing these notebooks to some extent.
" ;

   $prologue1 = '' if ( $filter =~ m@/ps@ ) ;

my $prologueCDF = 
"
Files saved explicitly as CDF have interactive content that can be explored with the CDF player.
" ;

my $out = "
\\begin{itemize}
" ;

   my $foundCDF = 0 ;

#   foreach ( @mathematica )
#{
#      my $path = $_->{'path'} ;
#print "p0: $path\n" if ( $path =~ /GAe/ );
#print "p1: $path\n" unless ( $path =~ /GAe/ );
#}

   foreach ( sort datesort @mathematica )
   {
      my $path = $_->{'path'} ;
#print "path: $path\n";
      my $date = $_->{'DATE'} ;
      my $desc = $_->{'WHAT'} ;
      my $thisfilter = $_->{'FILTER'} ;

      #my $fullpath = "https://raw.github.com/peeterjoot/mathematica/master/$path" ;
      my $fullpath = "https://raw.githubusercontent.com/peeterjoot/mathematica/master/$path" ;

      if ( $filter )
      {
         my $match = ( $path =~ m@$filter@ ) ;

#         if ( $match )
#{
#         print "filter: $path: $match\n" ;
#}

         # Subfiltering for problem sets.  This is a hack.
         if ( !$match 
              and ( defined $thisfilter )
              and ( $thisfilter =~ m@$filter@ )
              and ( $filter =~ m@/ps@) )
         {
            $match = 1 ;
         }

         next unless ( $match ) ;
      }

      my $label = $path ;
      $label =~ s,/,:,g ;

      if ( $filter )
      {
         $path =~ s@$filter@@;
      }

      $foundCDF++ if ( $path =~ /\.cdf$/i ) ;

      my $problemSetSolution = $_->{'PROBLEMSET'} ;

      my $thisitem = qq(\\item \\phantomsection \\label{path:$label} $date \\href{$fullpath}{$path}

$desc
) ;
      if ( defined $problemSetSolution )
      {
         $out .= "
\\ifthenelse{\\boolean{redacted}}%
{%
\\relax%
}%
{%
$thisitem%
}%
" ;
      }
      else
      {
         $out .= $thisitem ;
      }
   }

   print $prologue1 ;
   if ( $foundCDF )
   {
      print $prologueCDF ;
   }

   print "$out

\\end{itemize}
%-------------------------------------------------------
" ;
}

sub matlabIndexLatex
{
   my ($filter) = @_ ;

   #my $urlpath = "https://raw.github.com/peeterjoot/matlab/master/" ;

   my $prologue1 ;
   my $withHyperlinks = 1 ;

   if ( $filter =~ m@/proj@ )
   {
      $prologue1 = "" ;
      $withHyperlinks = 0 ;
   }
   elsif ( $filter =~ m@/ps@ )
   {
      $prologue1 = "" ;
   }
   else
   {
      $prologue1 =
"
%-------------------------------------------------------
These Matlab notebooks, some just trivial ones used to generate figures, others more elaborate, and perhaps some even polished, can be found in

\\href{https://github.com/peeterjoot/matlab}{https://github.com/peeterjoot/matlab}.

These notebooks are text files, but a matlab product is required to execute them.
" ;
}

my $out = "
\\begin{itemize}
" ;

   foreach ( sort datesort @matlab )
   {
      my $path = $_->{'path'} ;
      my $date = $_->{'DATE'} ;
      my $desc = $_->{'WHAT'} ;

      if ( $filter =~ m@/proj@ )
      {
         my $short = $_->{'SHORT'} ;
         if ( defined $short )
         {
            $desc = $short ;
         }

         my $filterif = $_->{'FILTERIF'} ;

         if ( defined $filterif )
         {
            next ;
         }
      }

      if ( $filter )
      {
         next unless ( $path =~ /$filter/ ) ;
      }

      #my $fullpath = "https://raw.github.com/peeterjoot/matlab/master/$path" ;
      my $fullpath = "https://raw.githubusercontent.com/peeterjoot/matlab/master/$path" ;

      my $label = $path ;
      $label =~ s,/,:,g ;

      my $problemSetSolution = $_->{'PROBLEMSET'} ;
      my $reference ;
      my $phantomsection = "" ;
      my $withdate = "" ;

      if ( $withHyperlinks )
      {
         $reference = "\\href{$fullpath}{$path}" ;
         $withdate = "$date" ;
         
         $phantomsection = "\\phantomsection \\label{path:$label}" ;
      }
      else
      {
         # this hackery is to cater to the ieee report class

         $reference = "$path" ;
         $reference =~ s,ece1254/proj/,, ;
      }

      if ( !$redacted or ($redacted and !defined $problemSetSolution) )
      {
         $out .= qq(\\item $phantomsection $withdate $reference

$desc
) ;
      }
   }

   print $prologue1 ;

   print "$out

\\end{itemize}
%-------------------------------------------------------
" ;
}

sub juliaIndexLatex
{
   my ($filter) = @_ ;

   #my $urlpath = "https://raw.github.com/peeterjoot/julia/master/" ;

   my $withHyperlinks = 1 ;
   my $prologue1 = '' ;

   if ( $filter !~ m@/ps@ )
   {
   $prologue1 = "
%-------------------------------------------------------
These Julia notebooks, can be found in

\\href{https://github.com/peeterjoot/julia}{https://github.com/peeterjoot/julia}.

These notebooks are text files.  The julia program, available freely at \\href{https://julialang.org/}{www.julialang.org}, is required to execute them.  Some Julia code can also be evaluated with Matlab.
" ;
   }

   my $out = "
\\begin{itemize}
" ;

   foreach ( sort datesort @julia )
   {
      my $path = $_->{'path'} ;
      my $date = $_->{'DATE'} ;
      my $desc = $_->{'WHAT'} ;
      my $junk = $_->{'JUNK'} ;

      next if ( defined $junk ) ;

      if ( $filter =~ m@/proj@ )
      {
         my $short = $_->{'SHORT'} ;
         if ( defined $short )
         {
            $desc = $short ;
         }

         my $filterif = $_->{'FILTERIF'} ;

         if ( defined $filterif )
         {
            next ;
         }
      }

      if ( $filter )
      {
         next unless ( $path =~ /$filter/ ) ;
      }

      #my $fullpath = "https://raw.github.com/peeterjoot/julia/master/$path" ;
      my $fullpath = "https://raw.githubusercontent.com/peeterjoot/julia/master/$path" ;

      my $label = $path ;
      $label =~ s,/,:,g ;

      my $problemSetSolution = $_->{'PROBLEMSET'} ;
      my $reference = "\\href{$fullpath}{$path}" ;
      my $withdate = "$date" ;
      
      my $phantomsection = "\\phantomsection \\label{path:$label}" ;

      if ( !$redacted or ($redacted and !defined $problemSetSolution) )
      {
         $out .= qq(\\item $phantomsection $withdate $reference

$desc
) ;
      }
   }

   print $prologue1 ;

   print "$out

\\end{itemize}
%-------------------------------------------------------
" ;
}

sub dumpem
{
   my @sorted = sort datesort @_ ;

   print "\\${chaptertex}{Chronological Index}\n\\label{chap:Chronology}\n\n\\begin{itemize}\n\n" ;
   foreach (@sorted)
   {
      my ($source, $title, $date, $ref, $what)
         = ( $_->{'SOURCE'},
             $_->{'TITLE'},
             $_->{'DATE'},
             $_->{'REF'},
             $_->{'WHAT'} ) ;

      $what  = '' if ( !defined $what ) ;
      $title = '' if ( !defined $title ) ;
      $ref = ''   if ( !defined $ref ) ;
      $date = ''  if ( !defined $date ) ;

      print "\\item $date \\ref{chap:$ref} $title\n\n$what" ;
   }
   print "\\end{itemize}\n" ;
}

#sub testm
#{
#print $monthsOfYear{'July'} ;
#}

sub checkDate
{
   foreach (@miscphysics)
   {
      my $bdate = $_->{'DATE'} ;
      die "date parse: $bdate : $$a\n" unless ( $bdate =~ /(\S+)\s+(\d+)\s*,\s*(\d+)\s*/ ) ;
   }
}

sub datesort
{
   my ($adate, $bdate) = ( $$a{'DATE'}, $$b{'DATE'} ) ;
#print "a: $$a{'DATE'}, b: $$b{'DATE'}\n";
#   my ($asource, $atitle, $adate, $aref)
#         = ( $$a{'SOURCE'},
#             $$a{'TITLE'},
#             $$a{'DATE'},
#             $$a{'REF'} ) ;
#
#   my ($bsource, $btitle, $bdate, $bref)
#         = ( $$b{'SOURCE'},
#             $$b{'TITLE'},
#             $$b{'DATE'},
#             $$b{'REF'} ) ;

   die "date parse: $adate : $$a\n" unless ( $adate =~ /(\S+)\s+(\d+)\s*,\s*(\d+)\s*/ ) ;
   my ($amonth, $aday, $ayear) = ($1, $2, $3) ;

   die "date parse: $bdate : $$b\n" unless ( $bdate =~ /(\S+)\s+(\d+)\s*,\s*(\d+)\s*/ ) ;
   my ($bmonth, $bday, $byear) = ($1, $2, $3) ;

   my $rc = $ayear <=> $byear ;
   if ( !$rc )
   {
      die "amonth: $amonth" if ( !defined $monthsOfYear{$amonth} );
      die "bmonth: $bmonth" if ( !defined $monthsOfYear{$bmonth} );

      $rc = $monthsOfYear{$amonth} <=> $monthsOfYear{$bmonth} ;

      if ( !$rc )
      {
         $rc = $aday <=> $bday ;
      }
   }

   return $rc ;
}

sub printBib
{
   use POSIX qw(strftime);
   my $now_string = strftime "%d-%B-%Y", localtime;

   foreach (sort { $a->{SOURCE} cmp $b->{SOURCE} } @_)
   {
      next unless ( exists $_->{'URL'} ) ;

      my $r = $_->{'REF'} ;
      $r = $_->{'BIBREF'} if ( exists $_->{'BIBREF'} ) ;
      my $year = '' ;
      if ( $_->{'DATE'} =~ /\b(20\d\d)$/ )
      {
         $year = "   year={$1},\n" ;
      }

      print qq(
\@webpage{$r,
   author={Peeter Joot},
   title={{$_->{'TITLE'}}},
   note = "[Online; accessed $now_string]",
$year   url={$_->{'URL'}}
}

) ;
   }
}

sub printBookBib
{
   my ($tag, $url, @rest) = @_ ;

   my $title = "$titles{$tag}.";

   use POSIX qw(strftime);
   my $now_string = strftime "%d-%B-%Y", localtime;

   my $firstdone = 0;

   foreach ( sort { $a->{SOURCE} cmp $b->{SOURCE} } @rest )
   {
      my $r = $_->{'REF'} ;
      $r = $_->{'BIBREF'} if ( exists $_->{'BIBREF'} ) ;
      my $chapter = $_->{'TITLE'} ;
      my $year = '' ;
      if ( $_->{'DATE'} =~ /\b(20\d\d)$/ )
      {
         $year = "   year={$1},\n" ;
      }

      unless ( $firstdone )
      {
      print qq(
\@inbook{$tag,
   author={Peeter Joot},
   title={{$title}},
   note = "[Online; accessed $now_string]",
   publisher={peeterjoot.com},
$year   url={$url}
}

) ;
         $firstdone = 1;
       }

      print qq(
\@inbook{$tag:$r,
   author={Peeter Joot},
   title={{$title}},
   chapter={{$chapter}},
   note = "[Online; accessed $now_string]",
   publisher={peeterjoot.com},
$year   url={$url}
}

) ;
   }
}

#sub printBib
#{
#   foreach (sort { $a->{SOURCE} cmp $b->{SOURCE} } @_)
#   {
#      my $r = $_->{'REF'} ;
#      my $s = $_->{'SOURCE'} ;
#      $r = $_->{'BIBREF'} if ( exists $_->{'BIBREF'} ) ;
#
#      print "s/chapcite{$s}/chapcite{$s}{$r}/\n" ;
#   }
#}

# for my web page listing.
sub printHistory
{
   my @sorted = reverse sort datesort @_ ;

   foreach (@sorted)
   {
      next unless ( exists $_->{'URL'} ) ;

      my ($date, $url, $title, $what) = ($_->{'DATE'}, $_->{'URL'}, $_->{'TITLE'}, $_->{WHAT} ) ;

      if ( defined $what )
      {
         if ( $what eq $title )
         {
            $what = '' ;
         }
      }
      else
      {
         $what = '' ;
      }

      print qq($date <a href="$url">$title</a><br>$what<br>\n\n) ;
   }
}
